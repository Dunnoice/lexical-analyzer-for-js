#include <fstream>
#include <regex>
#include <iostream>

#include "lexer.h"

std::string statusNames[a] =
{
  "START",
  "IDENT",
  "NUMBER",
  "REALNUMBER_ONE",
  "REALNUMBER_DOT",
  "STRING",
  "STRING_END",
  "STRING_SLASH",
  "SLASH",
  "ONE_LC",
  "MULTI_LC",
  "MULTI_LC_PRE_END",
  "MULTI_LC_END",
  "STAR",
  "PLUS",
  "PLUSPLUS",
  "MINUS",
  "MINUSMINUS",
  "PERCENT",
  "NOT",
  "EQUAL",
  "TWO_EQUAL",
  "THREE_EQUAL",
  "SLASHEQUAL",
  "STAREQUAL",
  "PLUSEQUAL",
  "MINUSEQUAL",
  "PERCENTEQUAL",
  "NOTEQUAL",
  "NOT_TWO_EQUAL",
  "OPEN_ROUND_BRACKET",
  "CLOSE_ROUND_BRACKET",
  "OPEN_CURLY_BRACKET",
  "CLOSE_CURLY_BRACKET",
  "COMMA",
  "SEMICOLON",
  "AND",
  "ANDEQUAL",
  "ANDAND",
  "OR",
  "OREQUAL",
  "OROR",
  "MORE",
  "MOREOREQUAL",
  "LESS",
  "LESSOREQUAL"
};

State table[a][b] =
{
	{{START,1},{START,1},{IDENT,0},{NUMBER,0},{STRING,0},{ERROR,0},{REALNUMBER_DOT,0},{SLASH,0},{STAR,0},{PLUS,0},{MINUS,0},{PERCENT,0},{NOT,0},{EQUAL,0},{OPEN_ROUND_BRACKET,0},{CLOSE_ROUND_BRACKET,0},{OPEN_CURLY_BRACKET,0},{CLOSE_CURLY_BRACKET,0},{COMMA,0},{SEMICOLON,0},{AND,0},{OR,0},{MORE,0},{LESS,0},{ERROR,0}},
	{{START,1},{START,1},{IDENT,0},{IDENT,0},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{START,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,0},{STRING,1},{ERROR,0},{REALNUMBER_ONE,0},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{REALNUMBER_ONE,0},{STRING,1},{ERROR,0},{REALNUMBER_DOT,0},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{ERROR,0},{ERROR,0},{ERROR,0},{REALNUMBER_ONE,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0},{ERROR,0}},
	{{ERROR,0},{STRING,0},{STRING,0},{STRING,0},{STRING_END,0},{STRING_SLASH,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING_SLASH,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0},{STRING,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{ONE_LC,0},{MULTI_LC,0},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{SLASHEQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0},{ONE_LC,0}},
	{{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC_PRE_END,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0}},
	{{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC_END,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0},{MULTI_LC,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{STAREQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUSPLUS,0},{MINUS,1},{PERCENT,1},{NOT,1},{PLUSEQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUSMINUS,0},{PERCENT,1},{NOT,1},{MINUSEQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{PERCENTEQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{NOTEQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{TWO_EQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{THREE_EQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{NOT_TWO_EQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{ANDEQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{ANDAND,0},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{OREQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OROR,0},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{MOREOREQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{LESSOREQUAL,0},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}},
	{{START,1},{START,1},{IDENT,1},{NUMBER,1},{STRING,1},{ERROR,0},{REALNUMBER_DOT,1},{SLASH,1},{STAR,1},{PLUS,1},{MINUS,1},{PERCENT,1},{NOT,1},{EQUAL,1},{OPEN_ROUND_BRACKET,1},{CLOSE_ROUND_BRACKET,1},{OPEN_CURLY_BRACKET,1},{CLOSE_CURLY_BRACKET,1},{COMMA,1},{SEMICOLON,1},{AND,1},{OR,1},{MORE,1},{LESS,1},{ERROR,0}}
};

std::string regexes[b] = { "\\n", "\\s", "[_a-zA-Z]", "[0-9]", "\"", "\\\\", "\\.", "\\/", "\\*", "\\+", "\\-", "\\%",	"\\!", "\\=", "\\(", "\\)", "\\{", "\\}", "\\,", "\\;", "\\&", "\\|", "\\>", "\\<", "." };

std::set<std::string> keywords = { "var", "function", "return", "for", "while", "if", "else", "do", "const" };
std::set<std::string> reserved_names = { "typeof", "true", "false", "undefined", "null" };
std::set<STATUS> skip = { MULTI_LC_END, ONE_LC };

STATUS status = START;
STATUS oldStatus = START;
bool action = false;
std::string str = "";

std::vector<Token> parse(std::string filename)
{
	std::ifstream fin(filename);

	std::vector<Token> tokens;

	std::string tmp;
	int line = 0;
	
	while (!fin.eof())
	{
		line++;
		getline(fin, tmp);

		tmp += '\n';

		for (int i = 0, length = tmp.length(); i < length; i++)
		{
			checkSymbol(tokens, std::string(1, tmp[i]), line, i);
		}
	}

	fin.close();

	return tokens;
}

int getIndex(std::string s)
{
	for (int i = 0; i < b; i++)
	{
		std::regex e(regexes[i]);

		if (std::regex_match(s, e))
		{
			return i;
		}
	}

	return -1;
}

int checkSymbol(std::vector<Token> &tokens, std::string s, int line, int position)
{
	int index = getIndex(s);

	oldStatus = status;
	action = table[status][index].action;
	status = table[status][index].status;

	if (status == ERROR)
	{
		int size = position - str.length() + 1;
		std::cout << "[status: ERROR] [" << line << ":" << size << "] >> " << s << "\n";
		exit(0);
	}

	if (action == 0)
	{
		str += s;
	}
	else
	{
		if (status == START)
		{
			if (oldStatus != START)
			{
				checkWord(tokens, str, line, position);
			}

			str = "";
		}
		else
		{
			checkWord(tokens, str, line, position);
			str = s;
		}
	}

	return 1;
}

void checkWord(std::vector<Token> &tokens, std::string str, int line, int position)
{
	if (skip.count(oldStatus))
	{
		return;
	}

	int tmp = position - str.length() + 1;
	position = (tmp < 1 ? 1 : tmp);

	if (keywords.count(str))
	{
		struct Token tok = { "KEYWORD", str, line, position };
		tokens.push_back(tok);
		return;
	}

	if (reserved_names.count(str))
	{
		struct Token tok = { "RESERVED_NAME", str, line, position };
		tokens.push_back(tok);
		return;
	}

	struct Token tok = { statusNames[oldStatus], str, line, position };
	tokens.push_back(tok);

	return;
}